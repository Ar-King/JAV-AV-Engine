#ifndef _AVEngine_
#define _AVEngine_

#include "Service.h"
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "AVEngine_AsyncRPC_h.h" // header file generated by MIDL compiler


const int DEFAULT_MIN_CALLS   = 1;
const int DEFAULT_MAX_CALLS   = 20;

static PSECURITY_DESCRIPTOR pszSecurity   = NULL;
static DWORD dwThreadId;
static HANDLE hThread; 

// PURPOSE:   Server side main program
// RPC Service for handling client Scan requests
class AVEngine : Service
{
public:
	// RPC states changes by 
		bool Start();
		bool Stop();
		bool Puase();
		bool Continue();

private:
	// Setup RPC on server and wait in thread for listen client request specified in "AVEngine_AsyncRPC_h.h" and implemented at "AVEngine_AsyncRPC_Impl.cpp" server side
		static DWORD WINAPI SetupRPCServer(void* lpParam);
	// Quit when SetupRPCServer failed
		static void Quit(RPC_STATUS status);
	// Wait until thread have terminated, then Close all thread handles and free memory allocation.
		static bool CloseRPC();
};

#endif

